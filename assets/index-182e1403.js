import{A as W,a as b,S as R}from"./STS-00d90715.js";import{d as N,f as P,g as U,C as z,E as j,h as B,I as G,e as V,M as J,P as Q,R as X,c as Y,b as Z}from"./STS-00d90715.js";import{s as E}from"./index-8445f478.js";import{a as ee,C as ne}from"./index-8445f478.js";import"./index-20ffef33.js";const y="us-east-1",I=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const n=e.Arn.split(":");if(n.length>4&&n[4]!=="")return n[4]}},T=async(e,n,o)=>{var i;const c=typeof e=="function"?await e():e,r=typeof n=="function"?await n():n;return(i=o==null?void 0:o.debug)==null||i.call(o,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${c} (provider)`,`${r} (parent client)`,`${y} (STS default)`),c??r??y},K=(e,n)=>{let o,c;return async(r,i)=>{var u,C,S,f;if(c=r,!o){const{logger:s=(u=e==null?void 0:e.parentClientConfig)==null?void 0:u.logger,region:A,requestHandler:m=(C=e==null?void 0:e.parentClientConfig)==null?void 0:C.requestHandler,credentialProviderLogger:g}=e,h=await T(A,(S=e==null?void 0:e.parentClientConfig)==null?void 0:S.region,g),D=!w(m);o=new n({profile:(f=e==null?void 0:e.parentClientConfig)==null?void 0:f.profile,credentialDefaultProvider:()=>async()=>c,region:h,requestHandler:D?m:void 0,logger:s})}const{Credentials:t,AssumedRoleUser:a}=await o.send(new W(i));if(!t||!t.AccessKeyId||!t.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${i.RoleArn}`);const l=I(a),d={accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,sessionToken:t.SessionToken,expiration:t.Expiration,...t.CredentialScope&&{credentialScope:t.CredentialScope},...l&&{accountId:l}};return E(d,"CREDENTIALS_STS_ASSUME_ROLE","i"),d}},_=(e,n)=>{let o;return async c=>{var l,d,u,C;if(!o){const{logger:S=(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.logger,region:f,requestHandler:s=(d=e==null?void 0:e.parentClientConfig)==null?void 0:d.requestHandler,credentialProviderLogger:A}=e,m=await T(f,(u=e==null?void 0:e.parentClientConfig)==null?void 0:u.region,A),g=!w(s);o=new n({profile:(C=e==null?void 0:e.parentClientConfig)==null?void 0:C.profile,region:m,requestHandler:g?s:void 0,logger:S})}const{Credentials:r,AssumedRoleUser:i}=await o.send(new b(c));if(!r||!r.AccessKeyId||!r.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${c.RoleArn}`);const t=I(i),a={accessKeyId:r.AccessKeyId,secretAccessKey:r.SecretAccessKey,sessionToken:r.SessionToken,expiration:r.Expiration,...r.CredentialScope&&{credentialScope:r.CredentialScope},...t&&{accountId:t}};return t&&E(a,"RESOLVED_ACCOUNT_ID","T"),E(a,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),a}},w=e=>{var n;return((n=e==null?void 0:e.metadata)==null?void 0:n.handlerProtocol)==="h2"},x=(e,n)=>n?class extends e{constructor(c){super(c);for(const r of n)this.middlewareStack.use(r)}}:e,k=(e={},n)=>K(e,x(R,n)),v=(e={},n)=>_(e,x(R,n)),q=e=>n=>e({roleAssumer:k(n),roleAssumerWithWebIdentity:v(n),...n});export{ee as $Command,W as AssumeRoleCommand,N as AssumeRoleResponseFilterSensitiveLog,b as AssumeRoleWithWebIdentityCommand,P as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,U as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,z as CredentialsFilterSensitiveLog,j as ExpiredTokenException,B as IDPCommunicationErrorException,G as IDPRejectedClaimException,V as InvalidIdentityTokenException,J as MalformedPolicyDocumentException,Q as PackedPolicyTooLargeException,X as RegionDisabledException,Y as STS,R as STSClient,Z as STSServiceException,ne as __Client,q as decorateDefaultCredentialProvider,k as getDefaultRoleAssumer,v as getDefaultRoleAssumerWithWebIdentity};
